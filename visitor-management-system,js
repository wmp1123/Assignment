const { MongoClient, ServerApiVersion, MongoCursorInUseError } = require('mongodb');
const uri = "mongodb+srv://weemaophin:!Aa00045678@assignment1.jnbjfx4.mongodb.net/?retryWrites=true&w=majority";
const express = require('express');
const jwt = require('jsonwebtoken');
const app = express();
const port = 3000;
const bcrypt = require('bcrypt');
const saltRounds = 10;


// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});


async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");

    app.use(express.json());
    app.listen(port, () => {
      console.log(`Server listening at http://localhost:${port}`);
    });

    app.post('/registerAdmin', async (req, res) => {
    let data = req.body
    res.send(await registerAdmin(client, data))
    //data.password = await encryptPassword(data.password)
    }) 

    app.post('/login1', async (req, res) => {
      let data = req.body
       res.send(await login(client, data))
    })

    app.post('/register', verifyToken, async (req, res) => {
      let data = req.user,
      data1 = req.body
      res.send(await register(client, data, data1))
      //data.password = await encryptPassword(data.password)
    }) 

    app.get('/read', verifyToken, async (req, res) => {
      let data = req.user
      res.send(await read(client, data))
      //data.password = await encryptPassword(data.password)
    }) 

    app.patch('/update', verifyToken, async (req,res) => {
      let data = req.user,
      data1 = req.body
      res.send(await update(client, data, data1))
    })

    app.delete('/deleteUser', verifyToken, async(req,res) => {
      let data = req.user
      res.send(await deleteUser(client, data))
    })

    app.post('/checkIn', verifyToken, async(req,res) => {
      let data = req.user,
      data1 = req.body
      res.send(await checkIn(client, data, data1 ))
    })

    app.patch('/checkOut', async(req,res) => {
      let data = req.body
      res.send(await checkOut(client, data))
    })

  } catch (e) {
    console.error(e);

  } finally {
    // Ensures that the client will close when you finish/error
    //await client.close();
  }
}
run().catch(console.error);

//To generate token
function generateToken(userProfile){
  return jwt.sign(
  userProfile,    //this is an obj
  'mypassword',           //password
  { expiresIn: '1h' });  //expires after 1 hour
}

async function registerAdmin(client, data) {
  data.password = await encryptPassword(data.password)
  console.log(data.password)
  const result = await client.db("visitor-management-system").collection("Users").insertOne(data);
}

async function login(client, data) {
  let match = await client.db("visitor-management-system").collection("Users").findOne({username: data.username})
  if (match) {
    if (await decryptPassword(data.password, match.password)) {
      console.log(generateToken(match))
      return (`You are logged in as '${match.role}'`)
    } else {
      return "Wrong password"
    }
  } else {
    return "User not found"
  }
}

async function encryptPassword(password) {
  const hash = await bcrypt.hash(password, saltRounds); 
  return hash 
}

async function decryptPassword(password, compare) {
  const match = await bcrypt.compare(password, compare)
  return match
}

async function register(client, data, data1){
  if(data.role == 'Admin') {
    const result = await client.db("visitor-management-system").collection("Users").insertOne({
      username:data1.username,
      password:await encryptPassword(data1.password),
      name:data1.name,
      email:data1.email,
      role:'Host',
    })
    return "Host registered successfully"
  }
  if(data.role == 'Host') {
    const result = await client.db("visitor-management-system").collection("Users").insertOne({
      username:data1.username,
      password:await encryptPassword(data1.password),
      name:data1.name,
      email:data1.email,
      role:'Visitor',
      host:data.username,
    })
    return "Visitor registered successfully"
  }
}

async function read(client, data) {
  if(data.role == 'Admin') {
    Admins = await client.db('visitor-management-system').collection('Users').find({role:"Admin"}).toArray()
    Hosts = await client.db('visitor-management-system').collection('Users').find({role:"Host"}).toArray()
    Visitors = await client.db('visitor-management-system').collection('Users').find({role:"Visitor"}).toArray()
    Records = await client.db('visitor-management-system').collection('Records').find().toArray()
    return {Admins, Hosts, Visitors, Records}
    }

  if (data.role == 'Host') {
    Host = await client.db('visitor-management-system').collection('Users').find({username: data.username}).toArray()
    Visitors = await client.db('visitor-management-system').collection('Users').find({host: data.username}).toArray()
    Records = await client.db('visitor-management-system').collection('Records').find().toArray()
    return {Host, Visitors, Records}
    }

  if (data.role == 'Visitor') {
    Visitor = await client.db('visitor-management-system').collection('Users').findOne({username: data.username})
    Records = await client.db('visitor-management-system').collection('Records').find({recordID: {$in:data.records}}).toArray()
    return {User, Records}
  }
}

async function update(client, data, data1){
  result = await client.db("visitor-management-system").collection("Users").updateOne({username: data.username}, {$set: data1});
  return 'Update Successfully'
}

async function deleteUser(client, data) {
  result = await client.db("visitor-management-system").collection("Users").deleteOne({username: data.username});
  return "Delete Successfully"
}

async function checkIn(client, data, data1) {
  const result = await client.db("visitor-management-system").collection("Records").insertOne(
    {recordID: data1.recordID,
    checkInTime: new Date()}
    )

  const result1 = await client.db("visitor-management-system").collection("Users").updateOne(
    {username: data.username},
    {$push:{ records: data1.recordID }
  })
  return (`You have checked in at '${new Date()}'`)
}

async function checkOut(client, data) {
  const result = await client.db("visitor-management-system").collection("Records").updateOne(
    {recordID: data.recordID},
    {$set:{ checkOutTime: new Date() }
  })
  return (`You have checked out at '${new Date()}'`)
}

//to verify JWT Token
function verifyToken(req, res, next){
  let header = req.headers.authorization
  //to paste it in the cmd

  //split the bearer token 
  // take the index 1 , to exclude the bearer words
  let token = header.split(' ')[1];
  // secret verify must be same with secret in the generated
  jwt.verify(token, 'mypassword', function(err, decoded){
      if(err){
          res.send('Invalid token')
      }
      //so that can return req.user to use in the client 
      req.user = decoded
      next()
  });
}



